# Generated by Django 2.1.1 on 2019-01-19 04:10

from datetime import datetime
from os.path import join
from django.conf import settings
from django.db import migrations
from django.utils.text import slugify
from django.utils.timezone import make_aware


def migrate_old_posts(app, schema_editor):
    """
    Migrate old blog data (stored in JSON) to the current Django models
    """
    import json
    from markdownify import markdownify as md

    # Get Wiblog models
    Comment = app.get_model('wiblog', 'Comment')
    Post = app.get_model('wiblog', 'Post')
    Tag = app.get_model('wiblog', 'Tag')

    # Keep a cache of tags to prevent hammering the DB
    tags = {}

    # Get the old post data
    old_json_file = join(settings.WEBROOT,
            'src/wiblog/migrations/0007_auto_20190120_1309.json')
    old_posts = json.load(open(old_json_file, 'r'))

    for old_post in old_posts:

        new_post = Post(status='DFT')

        new_post.body = md(old_post['body'])
        new_post.title = old_post['title']
        new_post.date = convert_mysql_date(old_post['date'])
        new_post.slug = slugify(old_post['title'])

        new_post.save()

        migrate_post_comments(Comment, new_post, old_post['comments'])
        migrate_post_tags(Tag, new_post, tags, old_post['categories'])


def migrate_post_comments(Comment, post, comments):
    """
    Add in any comments that were added to this post previously
    """
    if not comments:
        return

    for comment in comments:
        new_comment = Comment(moderated='HAM')


        new_comment.name = comment['name']
        new_comment.date = convert_mysql_date(comment['date'])
        new_comment.comment = comment['text']
        new_comment.url = comment['url']
        new_comment.post = post

        new_comment.save()


def migrate_post_tags(Tag, post, tags, old_tags):
    """
    Associate this post with any tags present
    """
    if not old_tags:
        return

    for tag in old_tags:

        tag = tag.lower()

        # Create tag if not present, and cache it
        if tag not in tags:
            tags[tag],_ = Tag.objects.get_or_create(desc=tag)

        post.tags.add(tags[tag])


def convert_mysql_date(date_string):
    """
    Create a datetime object from the mysql date string
    (Format: yyyymmddhhmmss)
    """
    return make_aware(datetime(int(date_string[:4]),
            int(date_string[4:6]),
            int(date_string[6:8])))


class Migration(migrations.Migration):

    dependencies = [
        ('wiblog', '0006_auto_20190120_1307'),
    ]

    operations = [
            migrations.RunPython(migrate_old_posts),
    ]

